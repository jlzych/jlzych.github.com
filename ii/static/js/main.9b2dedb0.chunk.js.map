{"version":3,"sources":["Toolbar.js","EditorCE.js","index.js"],"names":["Toolbar","props","handleToggleShowText","bind","className","type","checked","this","showText","onChange","onClick","handleClearText","handleUndo","disabled","undoDisabled","textEmpty","handleCopy","React","Component","EditorCE","editorDiv","createRef","handleFocus","handleOnChange","handleKeyDown","range","document","createRange","sel","window","getSelection","lastChild","current","childNodes","length","textContent","setStart","collapse","removeAllRanges","addRange","event","includes","keyCode","preventDefault","handleUpdateText","target","value","classes","onFocus","onKeyDown","html","text","innerRef","spellCheck","InvisibleInk","state","previousText","replace","copy","toast","setState","autoClose","position","hideProgressBar","transition","Slide","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9b2dedb0.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Toolbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleToggleShowText = this.props.handleToggleShowText.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"toolbar\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={this.props.showText}\n            onChange={this.handleToggleShowText} />\n          Show text\n        </label>\n        <button\n          onClick={this.props.handleClearText}\n        >\n          Clear\n        </button>\n        <button\n          onClick={this.props.handleUndo}\n          disabled={this.props.undoDisabled}\n        >\n          Undo Clear\n        </button>\n        <button\n          disabled={this.props.textEmpty}\n          onClick={this.props.handleCopy}\n        >Copy</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ContentEditable from 'react-contenteditable';\n\nexport class EditorCE extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.editorDiv = React.createRef();\n\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  handleFocus() {\n    if (!this.props.showText) {\n      const range = document.createRange();\n      const sel = window.getSelection();\n      let lastChild = this.editorDiv.current.childNodes[this.editorDiv.current.childNodes.length - 1];\n\n      // If the last child has more children, select that child\n      if (lastChild && lastChild.childNodes && lastChild.childNodes.length > 0) {\n        lastChild = lastChild.childNodes[lastChild.childNodes.length - 1];\n      }\n\n      if (lastChild && lastChild.textContent) {\n        range.setStart(lastChild, lastChild.textContent.length);\n        range.collapse(true);\n        sel.removeAllRanges();\n        sel.addRange(range);\n      }\n    }\n  }\n\n  handleKeyDown(event) {\n    const preventedKeystrokes = [\n      8,\n      37,\n      38,\n      39,\n      40 // Bottom arrow\n    ];\n\n    if (preventedKeystrokes.includes(event.keyCode)) {\n      event.preventDefault();\n    }\n\n  }\n\n  handleOnChange(event) {\n    this.props.handleUpdateText(event.target.value);\n  }\n\n  render() {\n    const classes = \"text\" +\n      (this.props.showText ? \"\" : \" writing-mode\");\n\n    return (\n      <div>\n        <h2>Editor</h2>\n        <ContentEditable\n          className={classes}\n          disabled={this.props.showText ? true : false}\n          onFocus={this.handleFocus}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleOnChange}\n          html={this.props.text}\n          innerRef={this.editorDiv}\n          spellCheck={false} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Toolbar } from './Toolbar';\nimport { EditorCE } from './EditorCE';\nimport copy from 'copy-to-clipboard';\nimport { ToastContainer, toast, Slide } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass InvisibleInk extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showText: false,\n      text: '',\n      previousText: '',\n    };\n\n    this.handleCopy = this.handleCopy.bind(this);\n    this.handleUpdateText = this.handleUpdateText.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n  }\n\n  handleCopy() {\n    let text = this.state.text;\n    // Regex's taken from here, which has more\n    // tag types if necessary\n    // https://stackoverflow.com/questions/15180173/convert-html-to-plain-text-in-js-without-browser-environment/15180206\n\n    // Replace div, p, and br tags with newlines\n    text = text.replace(/<\\/div>/ig, '\\n');\n    text = text.replace(/<br\\s*[\\/]?>/gi, '\\n');\n    text = text.replace(/<\\/p>/ig, '\\n');\n    // Remove all other tags\n    text = text.replace(/(<([^>]+)>)/gi, \"\");\n\n    if (copy(text)) {\n      toast(\"Copied text. Now get to editing!\");\n    } else {\n      toast(\"Could not copy text :(\");\n    }\n  }\n\n  handleClearText() {\n    let previousText = this.state.text;\n    this.setState({\n      text: '',\n      previousText: previousText,\n    });\n  }\n\n  handleToggleShowText() {\n    const showText = this.state.showText;\n    this.setState({\n      showText: !showText,\n    });\n  }\n\n  handleUpdateText(text) {\n    this.setState({\n      text: text,\n      previousText: '',\n    });\n  }\n\n  handleUndo() {\n    this.setState({\n      text: this.state.previousText,\n      previousText: '',\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>ðŸ–‹ Invisible Ink</h1>\n        <Toolbar\n          showText={this.state.showText}\n          handleClearText={() => this.handleClearText()}\n          handleCopy={() => this.handleCopy()}\n          handleToggleShowText={() => this.handleToggleShowText()}\n          handleUndo={this.handleUndo}\n          textEmpty={this.state.text === ''}\n          undoDisabled = {this.state.previousText ? false : true}\n        />\n        <h2>What are you writing about today?</h2>\n        <input className=\"writing-prompt\" />\n        {/* <Editor\n          handleUpdateText={this.handleUpdateText}\n          showText={this.state.showText}\n          text={this.state.text} /> */}\n\n        <EditorCE\n          handleUpdateText={this.handleUpdateText}\n          showText={this.state.showText}\n          text={this.state.text} />\n\n        <ToastContainer\n          autoClose={5000}\n          position=\"bottom-left\"\n          hideProgressBar={true}\n          transition={Slide}\n        ></ToastContainer>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <InvisibleInk />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}