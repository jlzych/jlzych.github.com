<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeff Zych</title>
  <subtitle></subtitle>
  <id>http://jlzych.com/</id>
  <link href="http://jlzych.com/"/>
  <link href="http://jlzych.com/feed.xml" rel="self"/>
  <updated>2013-11-11T20:16:00Z</updated>
  <author>
    <name>Jeff Zych</name>
  </author>
  <entry>
    <title>Why we built the Optimizely Styleguide</title>
    <link rel="alternate" href="/2013/11/11/why-we-built-the-optimizely-styleguide/"/>
    <id>/2013/11/11/why-we-built-the-optimizely-styleguide/</id>
    <published>2013-11-11T20:16:00Z</published>
    <updated>2013-11-11T20:16:00Z</updated>
    <author>
      <name>Jeff Zych</name>
    </author>
    <content type="html">&lt;p&gt;A few months ago, myself and the design team created the &lt;a href="http://styleguide.optimizely.com"&gt;Optimizely Stylguide&lt;/a&gt;. It&amp;rsquo;s a living document of our brand standards and the visual style of our site. Designing, building, and writing the content for it took a significant amount of time, but it was worth the effort. In this post I&amp;rsquo;m going to explain why we did it.&lt;/p&gt;

&lt;h2&gt;Why build a styleguide?&lt;/h2&gt;

&lt;h3&gt;A branding one-stop-shop&lt;/h3&gt;

&lt;p&gt;The original reason we wanted to build a styleguide was because we often get requests from people around the company for our logo. They also like to ask us which blue is our official blue. (It&amp;rsquo;s &lt;code&gt;#1964af&lt;/code&gt;). Providing one place for everyone to access this information, and explaining when and how to use our logos, saves both parties time.&lt;/p&gt;

&lt;p&gt;To achieve this goal, we put the full Optimizely logo, the Optimizely O, and our official brand colors on the styleguide&amp;rsquo;s home page. We provided the logos in png, psd, svg, and eps formats in black, white, and Optimizely blue, which covers the widest use cases. Since this is the primary information that most people are looking for, it makes sense to have it be the most immediately available.&lt;/p&gt;

&lt;h3&gt;Document our visual style&lt;/h3&gt;

&lt;p&gt;The second biggest driving force was to provide developers (including myself) documentation of the modules, classes, and mixins that exist in the codebase. It&amp;rsquo;s important that we maintain a consistent visual style, and re-using classes and mixins helps ensure we&amp;rsquo;re consistent. It also speeds up development. There have been a lot of times that I&amp;rsquo;ve written a mixin or class that someone didn&amp;rsquo;t know about, and they re-implemented it in a different area of our code. Documenting these styles helps prevent this.&lt;/p&gt;

&lt;p&gt;Furthermore, complex widgets that require a combination of HTML, CSS, and JS to function properly (such as popovers and dialog boxes) are hard to figure out just from reading source code. Explaining how to add these modules to a page, and all of their styling and JS options, is invaluable.&lt;/p&gt;

&lt;p&gt;In addition to just explaining how something works, we also wanted to document when it&amp;rsquo;s appropriate to use these various modules. You also can&amp;rsquo;t get this from reading code alone. This helps both engineers and designers understand when to use a popover instead of a tooltip, for example.&lt;/p&gt;

&lt;p&gt;This content is the meat of the site, and the parts that change most frequently (in fact, many still need to be written). We decided the most effective way to document these elements was to create real, working examples with HTML, CSS, and JS, rather than just provide static screenshots. This allows developers to interact with the widgets, see how they behave, and inspect the code. It also makes it easier to communicate complex modules, such as popovers and dialog boxes. We took a lot of inspiration from &lt;a href="http://getbootstrap.com/"&gt;Twitter&amp;rsquo;s Bootstrap&lt;/a&gt; and &lt;a href="http://foundation.zurb.com/"&gt;Zurb&amp;rsquo;s Foundation&lt;/a&gt;, which are both fantastic examples of using working code as documentation.&lt;/p&gt;

&lt;h3&gt;Code conventions&lt;/h3&gt;

&lt;p&gt;Along with documenting the various modules and classes we have available, we also wanted a place to explain our frontend code conventions (e.g. how to name classes, how files are organized, etc.). This is especially useful for new developers who are getting up to speed, but is also beneficial as a reference for all developers.&lt;/p&gt;

&lt;h3&gt;Shake out inconsistencies&lt;/h3&gt;

&lt;p&gt;Finally, a secondary goal and benefit of documenting our styles is that it brings us face to face with inconsistencies that need to be ironed out. There have been numerous times that writing down how something works made these inconsistencies obvious. This acts as a great forcing function to get us to have consistent styles (although we haven&amp;rsquo;t had time to fix all of them).&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In the months since the guide was released, it has been successful at achieving each of these goals. Various people around the company consult it regularly for our logos and colors; developers refer to it when implementing common modules; new developers have learned our coding conventions on their own; and we&amp;rsquo;ve found many ways to improve our visual style and code. Taking the time to build and document our brand guidelines and frontend code was well worth the effort, and I recommend anyone else who works on a moderately complex site build their own styleguide.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Channel Factors to Increase Offline Conversions</title>
    <link rel="alternate" href="/2013/10/22/using-channel-factors-to-increase-offline-conversions/"/>
    <id>/2013/10/22/using-channel-factors-to-increase-offline-conversions/</id>
    <published>2013-10-23T04:25:00Z</published>
    <updated>2013-10-23T04:25:00Z</updated>
    <author>
      <name>Jeff Zych</name>
    </author>
    <content type="html">&lt;p&gt;Anyone who has ever ignored to-do lists knows that any friction between yourself and your goal leads to frustration and potentially giving up altogether. This lesson applies to real life equally as well as it does to visitors on your website.&lt;/p&gt;

&lt;p&gt;If people sign up for something, how do you get them to actually follow through? Of course, anything that reduces friction is good for everyone involved, but there are often limitations to how much you can realistically remove. So how do you optimize these kinds of experiences? One technique is to explicitly spell out the next steps. Knowing the steps ahead of time makes the process easier to finish and overall less daunting. This theory is known as &lt;strong&gt;channel factors&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In 1965, psychologist Howard Levanthal &lt;a href="http://www.canyons.edu/faculty/rafterm/0%200lli%20Social%20Psychology/Social%20Day%20Pages/Day%203%20Info%20Pages/Effects%20of%20fear%20and%20specificity%20of%20recommendation%20upon%20attitudes%20and%20behavior.pdf"&gt;studied this phenomenon&lt;/a&gt; [pdf] by trying to persuade college students to get a tetanus vaccination. He distributed documents describing the risks of tetanus and the value of inoculation among two groups of people. The first group received just the information sheet, whereas the second group received the information sheet along with a campus map with the infirmary circled. Follow up surveys showed the communication was effective in changing beliefs and attitudes in both groups, but the number of people who actually followed through varied drastically. Only 3% of the first group got inoculated, compared to 28% of the group that also received a map.&lt;/p&gt;

&lt;p&gt;The key difference is that the map reduced the friction to following through. Just telling students to get vaccinated created a barrier: where do I go? Showing the students where to get the shot and urging them to pencil time on their calendar eliminated this barrier. In contrast, the group that only received the info sheet had no clear plan of how to get vaccinated. This made the task more abstract and difficult to complete, so fewer people followed through with an appointment.&lt;/p&gt;

&lt;p&gt;The implication for a website is clear: remove barriers to success. Make the next steps explicit, and provide as much information as possible to enable people to follow through. A great example of this is &lt;a href="http://www.crateandbarrel.com/"&gt;Create&amp;amp;Barrel’s&lt;/a&gt; checkout funnel, which was ranked as the top e-commerce checkout user experience by the &lt;a href="http://baymard.com/"&gt;Baymard Institute&lt;/a&gt;. (Note: since this rating, Crate&amp;amp;Barrel has done more A/B testing to further improve their checkout funnel). First of all, they reduced the funnel to as few steps as possible: Shipping; Payment; and Review &amp;amp; Place Order. Second, they clearly spell out each of these steps from the start, telling the user what they’ll need to do to place their order. Without this, people don’t have any expectation of how long the checkout process could take, and are more likely to drop out partway through.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Crate &amp; Barrel's checkout funnel" src="http://jlzych.com/images/2013-10-22-using-channel-factors-to-increase-offline-conversions/crate-barrel-checkout.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Crate&amp;amp;Barrel’s checkout funnel spells out each step for the user, which helps them complete their purchase.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This technique is especially useful for actions that take place off of the website, such as installing software. Firefox does a great job of this by listing each step with screenshots. This helps all users, technical and non-technical, successfully install their browser.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Firefox's download page walks the user through installation steps" src="http://jlzych.com/images/2013-10-22-using-channel-factors-to-increase-offline-conversions/firefox-download.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Firefox’s download page walks the user through the exact steps they must go through to install their browser, which increases the chances users will install their product.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These examples just scratch the surface of how channel factors can help you increase conversions. They key is to put yourself in the shoes of your users and ask yourself, “What additional information do I need to complete this task? What barriers are preventing me from reaching my goal?” Although they may look obvious to you, it won’t to your customers.
Do you want your users to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call, email, or write a politician? Provide a pre-written template that they just need to populate with their name.&lt;/li&gt;
&lt;li&gt;Volunteer for a cause? Show them a map of the closest location and the next time they can attend.&lt;/li&gt;
&lt;li&gt;Attend a live webcast? Provide an “Add to Calendar” button.&lt;/li&gt;
&lt;li&gt;Use your product or service? List each of the steps users have to go through to use it.&lt;/li&gt;
&lt;li&gt;Use a new (or even existing) feature? Figure out where in the flow of using your product this feature fits, and explicitly tell them to use it at the end of the previous step.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any objective on your site that requires completing a series of steps can potentially benefit from applying the lessons behind channel factors. Increase the chances that a visitor follows through on what they signed up for by providing all the help you can. When in doubt, over explain and be direct — even when the directions may seem obvious to you and your team. By A/B testing, you will ultimately find an optimized design somewhere between hit-you-over-the-head-obvious and confusion.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fostering creative environments</title>
    <link rel="alternate" href="/2013/10/13/fostering-creative-environments/"/>
    <id>/2013/10/13/fostering-creative-environments/</id>
    <published>2013-10-13T20:56:00Z</published>
    <updated>2013-10-13T20:56:00Z</updated>
    <author>
      <name>Jeff Zych</name>
    </author>
    <content type="html">&lt;p&gt;I recently read &lt;a href="http://www.smashingmagazine.com"&gt;Smashing Magazine&amp;rsquo;s&lt;/a&gt; article &lt;a href="http://www.smashingmagazine.com/2013/08/28/on-creative-leadership/"&gt;&amp;ldquo;On Creative Leadership&amp;rdquo;&lt;/a&gt; that talks about creating an environment in which people can be creative. This section really resonated with me because it&amp;rsquo;s something we do occasionally at Optimizely, and talk about doing more of:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every month, my team and I enter our planning room for at least three hours. We lock the doors, opening it only for pizza and beer deliveries. Our mission is to solve one problem. In past sessions, we have redesigned the user interface that powers our systems, solved marketing problems by “remarketing,” and found new and creative ways to present information. The role of an impresario has had such a direct and positive impact on the way we do business that I am now introducing the role to every team in our 100+ person company.&lt;/p&gt;

&lt;p&gt;Why does having an impresario work? Well, certain rules guide the team to moments of insight:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify a very specific problem to solve, and stay focused.&lt;/li&gt;
&lt;li&gt;Provide the necessary tools to spark inspiration (white boards, markers, paper, etc.).&lt;/li&gt;
&lt;li&gt;Be technology-agnostic! Don’t worry about how you will solve the problem; focus only on the why.&lt;/li&gt;
&lt;li&gt;There are no wrong answers; some are just better than others.&lt;/li&gt;
&lt;li&gt;Celebrate failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My team looks forward to their time spent locked up together because it gives us an opportunity to be creative in front of each other. Support their ideas, and help them grow. Don’t force your opinions and thoughts. If the group is moving in the wrong direction, ask them questions until they find the right path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The design team at Optimizely has done this a few times, and it&amp;rsquo;s always been extremely rewarding and productive. For example, recently another designer and myself locked ourselves in a room all day to redesign our jobs page. By the end of the day, the page was almost fully coded.&lt;/p&gt;

&lt;p&gt;This setting allowed us to be productive for two key reasons. First, we were insulated from distractions, which can quickly kill productivity and focus. Second, we had instant, high-bandwidth communication that enabled quick feedback and input from each other when needed. No waiting around for emails or responses via IM.&lt;/p&gt;

&lt;p&gt;Given the success of this and other similar sessions, we intend to do more of these focused work sessions in the future to foster our creativity and productivity.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Extend - SASS's Awkward Stepchild</title>
    <link rel="alternate" href="/2013/10/08/extend-sass-s-awkward-stepchild/"/>
    <id>/2013/10/08/extend-sass-s-awkward-stepchild/</id>
    <published>2013-10-08T16:47:00Z</published>
    <updated>2013-10-08T16:47:00Z</updated>
    <author>
      <name>Jeff Zych</name>
    </author>
    <content type="html">&lt;p&gt;SASS has a lot of really powerful features to help you write &lt;a href="http://en.wikipedia.org/wiki/Don&amp;#x27;t_repeat_yourself"&gt;DRY&lt;/a&gt; code quickly. One such feature is &lt;code&gt;@extend&lt;/code&gt;, which I find is overlooked by many developers but can be very useful when used properly.&lt;/p&gt;

&lt;h2&gt;@-what?&lt;/h2&gt;

&lt;p&gt;First, a little background on &lt;code&gt;@extend&lt;/code&gt;. It allows a selector to &lt;em&gt;extend&lt;/em&gt; the styles of another selector, essentially providing a form of sub-classing. &lt;code&gt;@extend&lt;/code&gt; works by combining selectors into a single comma-separated selector. A simple example:&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#bada55&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button-small&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@extend&lt;/span&gt; &lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.8em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Which outputs:&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.button-small&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bada55&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button-small&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#extend"&gt;SASS docs&lt;/a&gt; give a fuller explanation of how it works, and its limitations.&lt;/p&gt;

&lt;h2&gt;Why it&amp;rsquo;s great&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@extend&lt;/code&gt; can cut down duplicate styles and selectors. Modules derived from a base style can all &lt;code&gt;@extend&lt;/code&gt; the parent, and all the sub-classes will be added to the base selector. Alternative ways to achieve this in SASS include using mixins to output the base styles (which just adds bloat to the stylesheet, since the same set of rules is output multiple places in the final CSS); duplicate the properties in each selector (violates the principle of DRY and is a maintenance nightmare); or manually add each new selector to the base selector (also violates DRY and also is a maintenance nightmare, and the exact problem &lt;code&gt;@extend&lt;/code&gt; was designed to solve).&lt;/p&gt;

&lt;h3&gt;Placeholder selectors&lt;/h3&gt;

&lt;p&gt;Placeholder selectors make &lt;code&gt;@extend&lt;/code&gt; even sweeter. They are selectors that aren&amp;rsquo;t output unless extended by another selector (also known as &lt;a href="http://en.wikipedia.org/wiki/Abstract_type"&gt;abstract classes&lt;/a&gt; in OOP). It doesn&amp;rsquo;t sound like much, but I often run into situations where I have some classes (or elements) that share common styles, but I don&amp;rsquo;t need the base class in the HTML or CSS. For example:&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;span class="nc"&gt;.container-blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.container-red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container-blue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container-red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Each container selector has to be typed out twice &amp;ndash; once for their shared styles, and again for their specific styles. Not a big deal here, but quickly becomes unweildy the more sub-containers you add. Placeholder selectors can help us here:&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;span class="nv"&gt;%container-common-styles&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container-blue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@extend&lt;/span&gt; &lt;span class="nv"&gt;%container-common-styles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container-red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@extend&lt;/span&gt; &lt;span class="nv"&gt;%container-common-styles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now the common styles are in one place, and each class is in one place. This pays off the more selectors you have extending the placeholder.&lt;/p&gt;

&lt;p&gt;You can also feel guilt-free about using unsemantic, descriptive names, since the placeholder itself isn&amp;rsquo;t output in the final CSS. They are purely for yourself and other developers.&lt;/p&gt;

&lt;h2&gt;Dangers of @extend&lt;/h2&gt;

&lt;p&gt;As with any SASS you write, you need to keep an eye on the final CSS it outputs. If you &lt;code&gt;@extend&lt;/code&gt; a class that&amp;rsquo;s used in many places, the selector will be copied to every instance of that class (even if it&amp;rsquo;s nested in other selectors). This is often unnecessary, and can cause unintended side effects (I ran into a nasty styling bug because of this once).&lt;/p&gt;

&lt;p&gt;For example, a &lt;code&gt;.button&lt;/code&gt; class is originally defined in one place, but modified to look slightly different in a dialog. When extending it, you only wanted the original styles, but the new selector is copied into the dialog button as well. This wasn&amp;rsquo;t what you intended, isn&amp;rsquo;t necessary, and bloated your final CSS. Before extending classes, check everywhere they&amp;rsquo;re defined and make sure you want your selector to be duplicated in all of those places. (Arguably, this is bad CSS to begin with [you shouldn&amp;rsquo;t change a button style based on the dialog context in the first place], but in real world CSS it happens).&lt;/p&gt;

&lt;p&gt;Additionally, the depth and breadth of selectors you have nested under the base selector, combined with the number of selectors extending the base, can create some &lt;em&gt;very&lt;/em&gt; long selectors, not all of which are necessary. Once again, pay attention to the CSS that&amp;rsquo;s being compiled. And once again, this is arguably bad SASS (mind the &lt;a href="http://thesassway.com/beginner/the-inception-rule"&gt;Inception Rule&lt;/a&gt;), but these things happen in legacy codebases with multiple developers.&lt;/p&gt;

&lt;h2&gt;Closing Thoughts&lt;/h2&gt;

&lt;p&gt;Extending selectors can save you time and DRY out your code, when used properly. As with most SASS features, it can be abused and create some pretty hairy CSS, but as long as you keep an eye on the final CSS you&amp;rsquo;ll be fine.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Framing your message for maximum impact</title>
    <link rel="alternate" href="/2013/09/30/framing-your-message-for-maximum-impact/"/>
    <id>/2013/09/30/framing-your-message-for-maximum-impact/</id>
    <published>2013-10-01T04:09:00Z</published>
    <updated>2013-10-01T04:09:00Z</updated>
    <author>
      <name>Jeff Zych</name>
    </author>
    <content type="html">&lt;p&gt;A common piece of advice in the website optimization space is to test headlines and copy to find the optimal messaging. But there are endless possibilities and it’s not feasible to test them all, so how do you focus your tests on only the content that’s most likely to have an impact? Having a good hypothesis of why a change will be effective is key, and one such theory is &lt;strong&gt;framing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Framing is the simple idea that &lt;strong&gt;different ways of presenting the same information will evoke different emotional responses&lt;/strong&gt;, and thus influence a person’s decision. A simple example is the statement, &amp;ldquo;the odds of survival one month after surgery are 90%&amp;rdquo; is more reassuring than the equivalent statement of, &amp;ldquo;mortality within one month of surgery is 10%.&amp;rdquo; Although these statements present the same information, they bring drastically different associations to mind. With the former it’s easy to envision an outcome of survival (and thus be willing to go through with the surgery), whereas the latter evokes death (and will be less likely to take the perceived risk).&lt;/p&gt;

&lt;p&gt;The subtleties of framing a message are well known to marketers. For example, &lt;a href="http://www.citycliq.com/"&gt;CityCliq&lt;/a&gt; saw an &lt;a href="http://www.abtests.com/test/284001/landing-for-citycliq"&gt;89% conversion increase&lt;/a&gt; by changing their headline from, &amp;ldquo;Businesses grow faster online!&amp;rdquo; to, &amp;ldquo;Create a webpage for your business.&amp;rdquo; (They have since further optimized their homepage to have a different headline). The original headline is abstract and framed passively, whereas the winning variation is framed in an action-oriented way.&lt;/p&gt;

&lt;p&gt;This idea can be used more widely than for just selling products &amp;mdash; any organization that’s trying to spur people to action can make use of it as well. Convincing people to volunteer for a cause, sign a petition, donate money, etc., can all be greatly influenced by the way the message is framed. For example, &lt;a href="http://www.ncbi.nlm.nih.gov/pubmed/7789354"&gt;Banks, et al.&lt;/a&gt;, studied how this phenomenon affects behavior by showing two groups of women videos on breast cancer and mammography in order to convince them to get screened. The first group&amp;rsquo;s video was gain-framed, espousing the benefits of having a mammogram, whereas the second group&amp;rsquo;s video was loss-framed and emphasized the risks of not having one. Only 51.5% of those who saw the gain-framed video got a mammography, compared to 61.2% of the latter group (an 18% increase). The information presented was equivalent, but receiving it in a loss-framed context forced people to imagine the scenario of having breast cancer, which spurred them to action.&lt;/p&gt;

&lt;p&gt;So how do you know which way to frame your message? There are no one-size-fits-all rules &amp;mdash; it’s still important to test variations. But now instead of arbitrarily changing words (which could go on ad infinitum) you have a narrower and more focused approach to crafting messages. What you want to avoid is testing essentially equivalent phrases that are unlikely to have any significant impact on your goals. For example, the phrases, &amp;ldquo;the odds of survival one month after surgery are 90%&amp;rdquo; and, &amp;ldquo;there is a 90% chance you will be alive a month after surgery&amp;rdquo; contain the same information and are framed equivalently, and thus aren’t likely to change your visitors’ behavior. Instead, &lt;strong&gt;you should think about strikingly different ways you can frame your value proposition&lt;/strong&gt; and test each of them. Try asking yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is this positive or negative (e.g. the odds of survival example)?&lt;/li&gt;
&lt;li&gt;Is this loss-framed or gain-framed (e.g. the mammography study)?&lt;/li&gt;
&lt;li&gt;Is this action-oriented or passive (e.g. the CityCliq create a web page example)?&lt;/li&gt;
&lt;li&gt;More generally, what associations are brought to mind? For example, deli meats that advertise &amp;ldquo;95% fat free&amp;rdquo; sounds healthy, whereas &amp;ldquo;Only 5% fat&amp;rdquo; sounds unhealthy. This is tricky to ascertain a priori, but you can read messages to people around you (co-workers, friends, family) and ask what first comes to mind when they hear it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your message may not have a clear answer for all of these, but for the pertinent questions you should &lt;strong&gt;test messages with the opposite framing&lt;/strong&gt;. More likely than not, one of them will resonate better with your audience.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more on this topic, read chapter 7 of Daniel Kahneman’s book, &amp;ldquo;&lt;a href="http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637/"&gt;Thinking, Fast and Slow.&lt;/a&gt;&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Gradients In Place of Images</title>
    <link rel="alternate" href="/2013/09/22/using-gradients-in-place-of-images/"/>
    <id>/2013/09/22/using-gradients-in-place-of-images/</id>
    <published>2013-09-23T04:56:00Z</published>
    <updated>2013-09-23T04:56:00Z</updated>
    <author>
      <name>Jeff Zych</name>
    </author>
    <content type="html">&lt;p&gt;Recently at &lt;a href="https://www.optimizely.com"&gt;Optimizely&lt;/a&gt;, I needed to create ribbons as part of the design of our &lt;a href="https://www.optimizely.com/ecommerce-ab-testing"&gt;Summertime Christmas&lt;/a&gt; campaign (see image below). The easy way would have been to throw a repeating background image on some &lt;code&gt;div&lt;/code&gt;s, but then I remembered CSS3 gradients can be used to create some pretty interesting patterns (for example, see &lt;a href="http://lea.verou.me/"&gt;Lea Verou&lt;/a&gt;&amp;rsquo;s &lt;a href="http://lea.verou.me/css3patterns/"&gt;CSS3 patterns gallery&lt;/a&gt;). Besides being a novel use of gradients, it also makes my markup more semantic (no empty container &lt;code&gt;div&lt;/code&gt;s required), and makes the design more flexible (everything is generated programmatically, and thus easily changeable, unlike images).&lt;/p&gt;

&lt;p&gt;&lt;img alt="Summertime Christmas campaign with ribbon background" src="http://jlzych.com/images/2013-09-22-using-gradients-in-place-of-images/summertime-xmas.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The ribbons of Summertime Christmas&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;The Technique&lt;/h2&gt;

&lt;p&gt;The basic technique is to make the color stops end and start at the same place, thus creating hard lines between colors. Then, set the &lt;code&gt;background-size&lt;/code&gt; so the ribbon occupies a specific width instead of spreading across the entire element.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code for the vertical ribbon (vendor-specific properties left out deliberately):&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;#4783bf&lt;/span&gt; &lt;span class="nt"&gt;8&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="nt"&gt;8&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="nt"&gt;starts&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;same&lt;/span&gt; &lt;span class="nt"&gt;spot&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;blue&lt;/span&gt;
                  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;ends&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;creating&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;hard&lt;/span&gt; &lt;span class="nt"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="nt"&gt;12&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nf"&gt;#4783bf&lt;/span&gt; &lt;span class="nt"&gt;12&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nf"&gt;#4783bf&lt;/span&gt; &lt;span class="nt"&gt;88&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="nt"&gt;88&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="nt"&gt;92&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nf"&gt;#4783bf&lt;/span&gt; &lt;span class="nt"&gt;92&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;background-repeat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;no-repeat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;background-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;80px&lt;/span&gt; &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
&lt;/pre&gt;
&lt;p data-height="268" data-theme-id="0" data-slug-hash="DhIJp" data-user="jlzych" data-default-tab="result" class='codepen'&gt;See the Pen &lt;a href='http://codepen.io/jlzych/pen/DhIJp'&gt;Vertical ribbon&lt;/a&gt; by Jeff (&lt;a href='http://codepen.io/jlzych'&gt;@jlzych&lt;/a&gt;) on &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;script async src="http://codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;Using percentages for the color stops (instead of hard-coded pixel values) allowed me to adjust the width of the ribbon by changing just one number — the first parameter of the &lt;code&gt;background-size&lt;/code&gt;. (One thing to be careful of is that the ribbon can render imprecisely in certain browsers when the width gets small, so you may need to use pixel values in these situations.)&lt;/p&gt;

&lt;p&gt;To add the horizontal ribbon, it&amp;rsquo;s a simple matter of layering multiple &lt;code&gt;background-image&lt;/code&gt;s on top of each other (by providing a comma-separated list of values, the first of which is on top), and switching the vertical and horizontal values of the &lt;code&gt;background-size&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;span class="nc"&gt;.ribbons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#4783bf&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#4783bf&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#4783bf&lt;/span&gt; &lt;span class="m"&gt;88&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;88&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;92&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#4783bf&lt;/span&gt; &lt;span class="m"&gt;92&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#4783bf&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#4783bf&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#4783bf&lt;/span&gt; &lt;span class="m"&gt;88&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;88&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;92&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#4783bf&lt;/span&gt; &lt;span class="m"&gt;92&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="m"&gt;#1964af&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;darker&lt;/span&gt; &lt;span class="err"&gt;blue&lt;/span&gt; &lt;span class="err"&gt;behind&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;ribbons&lt;/span&gt;

  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p data-height="268" data-theme-id="0" data-slug-hash="pBwLs" data-user="jlzych" data-default-tab="result" class='codepen'&gt;See the Pen &lt;a href='http://codepen.io/jlzych/pen/pBwLs'&gt;Vertical and horizontal ribbon&lt;/a&gt; by Jeff (&lt;a href='http://codepen.io/jlzych'&gt;@jlzych&lt;/a&gt;) on &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;script async src="http://codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;h2&gt;Some SCSS to Save Us&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ve probably noticed there are a lot of repeated values within each &lt;code&gt;linear-gradient&lt;/code&gt;. You also probably noticed that the vertical and horizontal ribbons use the same &lt;code&gt;linear-gradient&lt;/code&gt;, except for the direction they&amp;rsquo;re rendered (the first parameter). As I was developing this, it quickly became cumbersome to fiddle with the ribbon&amp;rsquo;s sizing and color, so I leveraged SCSS to help me out. I&amp;rsquo;m not going to explain everything that&amp;rsquo;s going on here, but am providing this code for anyone who finds it useful (and for my own future reference).&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;span class="nc"&gt;.ribbons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Variable declarations
&lt;/span&gt;  &lt;span class="nv"&gt;$ribbon-blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#4783bf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$ribbon-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$stops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;88%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;92%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$ribbon-gradient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$ribbon-blue&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$stops&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$stops&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$stops&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$ribbon-blue&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$stops&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$ribbon-blue&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$stops&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$stops&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$stops&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$ribbon-blue&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$stops&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Ribbon background stuff
&lt;/span&gt;  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$new-blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$ribbon-gradient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$ribbon-gradient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$new-blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ribbon-width&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="nv"&gt;$ribbon-width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ah, so much cleaner and compact! And it puts every value in one place, making it easy to tweak any aspect of the ribbon.&lt;/p&gt;

&lt;h2&gt;One More Example&lt;/h2&gt;

&lt;p&gt;I also recently used this technique on the &lt;a href="http://styleguide.optimizely.com"&gt;Optimizely styleguide&lt;/a&gt; to create the light blue stripe in our navigation, instead of creating a background image or using multiple elements.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Optimizely styleguide navigation" src="http://jlzych.com/images/2013-09-22-using-gradients-in-place-of-images/styleguide-nav.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Optimizely&amp;rsquo;s styleguide navigation&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This technique is handy for avoiding image creation, which improves page performance (by avoiding HTTP requests and reducing bandwidth usage), and makes the design easier to modify (no need to fire up Photoshop to make changes!). This example is just scratching the surface of novel ways gradients can be used to draw images in the browser.&lt;/p&gt;
</content>
  </entry>
</feed>
